{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS-Training-2024"
		},
		"AzureBlobStorageForSales_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageForSales'"
		},
		"AzureBlobStorageMca_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageMca'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabaseAlbinTest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAlbinTest'"
		},
		"AzureSqlDatabaseTest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseTest'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer2'"
		},
		"SqlServerAd2022_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerAd2022'"
		},
		"SqlServerExamDB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerExamDB'"
		},
		"SqlServerTableTesting_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerTableTesting'"
		},
		"SqlServerTestingWeb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerTestingWeb'"
		},
		"sqldbadventure_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'sqldbadventure'"
		},
		"sqldbexcersie_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'sqldbexcersie'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://satesting24.dfs.core.windows.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummy.restapiexample.com/api/v1/employee"
		},
		"RestService1Employee_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummy.restapiexample.com/api/v1/employee"
		},
		"RestService2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://jsonplaceholder.typicode.com/posts"
		},
		"RestService3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://jsonplaceholder.typicode.com/posts"
		},
		"RestService4_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb"
		},
		"RestService5_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.the-odds-api.com/v4/sports/?apiKey=895704cf19196886e42cf0fa4c9c6422"
		},
		"RestServiceAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://freetestapi.com/api/v1/cars"
		},
		"RestWeb1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.the-odds-api.com/v4/sports/?apiKey=895704cf19196886e42cf0fa4c9c6422"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "testing"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"SqlServer2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServer2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "testing"
		},
		"SqlServer2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"SqlServerAd2022_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServerAd2022_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2022"
		},
		"SqlServerAd2022_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"SqlServerExamDB_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServerExamDB_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AzureExam"
		},
		"SqlServerExamDB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"SqlServerTableTesting_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServerTableTesting_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "testing"
		},
		"SqlServerTableTesting_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"SqlServerTestingWeb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"SqlServerTestingWeb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "testing"
		},
		"SqlServerTestingWeb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"sqldbadventure_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"sqldbadventure_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2008R2"
		},
		"sqldbadventure_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		},
		"sqldbexcersie_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\SQLEXPRESS"
		},
		"sqldbexcersie_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "excerise"
		},
		"sqldbexcersie_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-14J830G\\Admin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jsonfloe",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/jsonfloe')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_CSV_TO_SQL_US_SALES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXAM_CSV_TO_SQL_US_SALES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "country",
										"value": "USA"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table [dbo].[total_sales] ",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Zip",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Zip",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Units",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "units",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedTextussales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerExamDBUSSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Rest of the countries",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXAM_CSV_TO_SQL_US_SALES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXAM_GETMETA_FOREACH",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T13:58:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextussales')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamDBUSSales')]",
				"[concat(variables('factoryId'), '/pipelines/EXAM_GETMETA_FOREACH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_DATAFLOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowExam",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductCategory": {},
									"ProductSubCatagory": {},
									"Products": {},
									"Top10": {},
									"sinkRest": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowExam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_GETMETA_FOREACH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetAllData",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedTextAllFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllData').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(equals(item().name, 'Canada.csv'), equals(item().name, 'Mexico.csv'))\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Rest of the country",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DelimitedTextforeach",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "SqlServerExamRONA",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "North America",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DelimitedTextforeach",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "SqlServerExamDBUSSales",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T13:58:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextAllFiles')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextforeach')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamRONA')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamDBUSSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_JSON_TO_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXAM_JSON_TO_SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table [dbo].[Raw]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RawJson1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerExamJsonRaw",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T13:16:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawJson1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamJsonRaw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_SQL_TO_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "America",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerExamDBUSSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextUsFiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "RONA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerExamRONA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextRONA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-28T04:52:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerExamDBUSSales')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextUsFiles')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamRONA')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextRONA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_SQL_TO_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXAM_SQL_TO_SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select top 1000 EmailAddress from [Person].[EmailAddress]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table [dbo].[person_Emails]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServeAd2022",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerExamDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T13:10:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServeAd2022')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_WEB_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table [dbo].[webcontent]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "userid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['body']"
										},
										"sink": {
											"name": "body",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestResourceWebContent",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerwebcontent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select distinct id from [dbo].[webcontent] where id<6",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerwebcontent",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from [dbo].[webcontent] where id=','''',item().id,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerFetchWebcontent",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTableWeb",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResourceWebContent')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerwebcontent')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerFetchWebcontent')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableWeb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXAM_WEB_TO_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://jsonplaceholder.typicode.com/posts"
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(activity('Web1').output.Response)",
								"type": "Expression"
							},
							"condition": {
								"value": "@less(item().id,5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['userId']"
													},
													"sink": {
														"name": "userid",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['id']"
													},
													"sink": {
														"name": "id",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['title']"
													},
													"sink": {
														"name": "title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['body']"
													},
													"sink": {
														"name": "body",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "RestResource3",
											"type": "DatasetReference",
											"parameters": {
												"id": {
													"value": "@item().id",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerwebcontent",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exam"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource3')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerwebcontent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filter_web_foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Web1').output.data",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(greater(item().id, 6), less(item().id, 9))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "\thttps://dummy.restapiexample.com/api/v1/employees"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['id']"
													},
													"sink": {
														"name": "id",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_name']"
													},
													"sink": {
														"name": "employee_name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_salary']"
													},
													"sink": {
														"name": "employee_salary",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_age']"
													},
													"sink": {
														"name": "employee_age",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['data']['profile_image']"
													},
													"sink": {
														"name": "profile_image",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['message']"
													},
													"sink": {
														"name": "message",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"id": {
													"value": "@item().id",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTableTesting",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-23T07:34:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupCities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from [dbo].[tot_sales] where country='USA'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableTesting",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTableTesting",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select distinct country from [dbo].[tot_sales] where country<>'USA'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable6",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from [dbo].[tot_sales] where country=','''',item().country,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTable6",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTotSales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-24T06:31:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable6')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTotSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzurestudentDim",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SUM",
							"value": {
								"value": "@string(add(\n    add(\n        add(\n            add(\n                int(activity('Lookup1').output.firstRow.Language),\n                int(activity('Lookup1').output.firstRow.Physics)\n            ),\n            int(activity('Lookup1').output.firstRow.Chemistry)\n        ),\n        int(activity('Lookup1').output.firstRow.ComputerScience)\n    ),\n    int(activity('Lookup1').output.firstRow.Maths)\n))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "AVG",
							"value": {
								"value": "@string(div(float(variables('SUM')), 5))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sp_master_dim_studentinfo]",
							"storedProcedureParameters": {
								"Avg": {
									"value": {
										"value": "@variables('AVG')",
										"type": "Expression"
									},
									"type": "String"
								},
								"Sum": {
									"value": {
										"value": "@variables('SUM')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.firstRow.studentid",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SUM",
										"value": {
											"value": "@string(add(\n    add(\n        add(\n            add(\n                int(activity('Lookup1').output.firstRow.Language),\n                int(activity('Lookup1').output.firstRow.Physics)\n            ),\n            int(activity('Lookup1').output.firstRow.Chemistry)\n        ),\n        int(activity('Lookup1').output.firstRow.ComputerScience)\n    ),\n    int(activity('Lookup1').output.firstRow.Maths)\n))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variable1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "AVG",
										"value": {
											"value": "@string(div(float(variables('SUM')), 5))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Stored procedure1_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dim].[sp_master_dim_studentinfo]",
										"storedProcedureParameters": {
											"Avg": {
												"value": {
													"value": "@variables('AVG')",
													"type": "Expression"
												},
												"type": "String"
											},
											"studentId": {
												"value": {
													"value": "@item().value",
													"type": "Expression"
												},
												"type": "String"
											},
											"Sum": {
												"value": {
													"value": "@variables('SUM')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseTest",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"SUM": {
						"type": "String"
					},
					"AVG": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sharmila/Activity1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzurestudentDim')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BLOB_TO_TABLE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_TABLE_BLOB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_UP_DEL_DIM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[json_stage_dim]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_TABLE_BLOB')]",
				"[concat(variables('factoryId'), '/pipelines/PL_UP_DEL_DIM')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Sales_Type",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Type": {},
									"sales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[salesTypeReport]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SP_UP_DEL_SALES",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity4"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Sales_Type')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SP_UP_DEL_SALES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Logicaltrial')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendingEmail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-91.eastus.logic.azure.com:443/workflows/91d770b22d514a988d03556c9a40bb7a/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=jVIq-8SmIa531ELL6Vgk5rVjcXTo7I_t3dM5Mo4ZFtI",
							"body": {
								"value": "{\n    \"to\": [\"sharmila.s@datasemantics.co\", \"mervin.m@datasemantics.co\"],\n    \"subject\": \"Pipeline Run Status\",\n    \"body\": \"This email was able to be sent because the Pipeline ran successfully.\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SP_UP_DEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update stage.sportsdata set [group]='indian football' where title='CFL'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Delete Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "delete from stage.sportsdata where [key]= 'americanfootball_ncaaf'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Dim",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Command",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Command",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sp_stage_dim_WebActivity]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity3"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SP_UP_DEL_SALES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update [stage].[salesReport] set grossValue=1 where id=2"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Script2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sp_stage_dim_salesReport]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Script2",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "delete from [stage].[salesReport] where id=3\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity4"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_UP_DEL_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update [stage].[JsonSampleActivity] set fullname='abc',country='India' where Id='11652'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Delete Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "delete from [stage].[JsonSampleActivity] where Id='11651'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Dim",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Command",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Command",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sp_stage_dim_JsonDataActivity]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Update_Dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update [stage].[studentInfo] set StudentName='xyz' where StudentId='S002'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Delete Command",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "delete from [stage].[studentInfo] where StudentId ='S003'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Dim",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Command",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Update Command",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sp_stage_dim_studentInfo]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_activity1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "updated_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UTCDate",
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "query1",
							"value": {
								"value": "'''select * from [dbo].[DataFlowData] '''",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "updated_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[dateeplace]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@variables('UTCDate')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"UTCDate": {
						"type": "String"
					},
					"query1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sharmila"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_blob_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLOB_TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "stageTableDate",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [Stage].[studentInfo]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "StudentId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StudentId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Student code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Studentcode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Student name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Studentname",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Maths",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Maths",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Phiysics",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Physics",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Chemistry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Chemistry",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Computersicence",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Computerscience",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "stageTableDate",
											"type": "String"
										},
										"sink": {
											"name": "stageTableDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "studentXL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureStudentData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TABLE_STAGE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BLOB_TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_stage_dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update_delete_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_dim_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Update_delete_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TABLE_STAGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Update_Dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "SentEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DIM_Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Logicaltrial",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/studentXL')]",
				"[concat(variables('factoryId'), '/datasets/AzureStudentData')]",
				"[concat(variables('factoryId'), '/pipelines/PL_stage_dim')]",
				"[concat(variables('factoryId'), '/pipelines/PL_dim_master')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Update_Dim')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Logicaltrial')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dim_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim_master",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataStudentMaster",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dim_master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Logicaltrial",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataStudentMaster')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Logicaltrial')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_stage_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM_TABLE_CREATION",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[studentinfodetails]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_web_Stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "StageCreatedDate",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stage.sportsdata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['key']"
										},
										"sink": {
											"name": "key",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['group']"
										},
										"sink": {
											"name": "group",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['active']"
										},
										"sink": {
											"name": "active",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['has_outrights']"
										},
										"sink": {
											"name": "has_outrights",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['StageCreatedDate']"
										},
										"sink": {
											"name": "stagecreateddate",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestSports",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTSports",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dim].[sportsinfodetails]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseTest",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SP_UP_DEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila/Activity3"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSports')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTSports')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SP_UP_DEL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_To_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RNo",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqldatabook1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-21T13:10:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqldatabook1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_to_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "country",
										"value": "USA"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductID"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date"
										}
									},
									{
										"source": {
											"name": "Zip",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Zip"
										}
									},
									{
										"source": {
											"name": "Units",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "units"
										}
									},
									{
										"source": {
											"name": "Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedTextussales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTableTesting",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-22T12:49:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextussales')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedTextsqltocsv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-21T12:19:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextsqltocsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/for_each')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedTextCSVTOSQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedTextforeach",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTableTesting",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-24T16:27:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextCSVTOSQL')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextforeach')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowTest",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dataflowus": {},
									"dataflowcanada": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableTest2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableAlbin",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-24T16:27:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowTest')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableTest2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableAlbin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table Production.testdata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_lake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "createdate",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.Date",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"createdate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sharmila"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azure_lake')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_forEach_if')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().name,'MCAA.csv')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DelimitedTextforeach",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "sqldatabook1",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedTextsqltocsv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-21T13:10:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextsqltocsv')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextforeach')]",
				"[concat(variables('factoryId'), '/datasets/sqldatabook1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_to_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableTesting",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextsqltocsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-22T12:49:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextsqltocsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/web_Activities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGetAll",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "\thttps://dummy.restapiexample.com/api/v1/employees"
						}
					},
					{
						"name": "WebGet1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://dummy.restapiexample.com/api/v1/employee/1"
						}
					},
					{
						"name": "WebPost",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "\thttps://dummy.restapiexample.com/api/v1/create",
							"body": {
								"name": "test",
								"salary": "123",
								"age": "23"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-23T06:46:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/webactivity_to_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['id']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['employee_name']"
										},
										"sink": {
											"name": "employee_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['employee_salary']"
										},
										"sink": {
											"name": "employee_salary",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['employee_age']"
										},
										"sink": {
											"name": "employee_age",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['profile_image']"
										},
										"sink": {
											"name": "profile_image",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['message']"
										},
										"sink": {
											"name": "message",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTableTesting",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "training"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-23T06:23:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource2')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlJsonStageTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Stage",
					"table": "JsonSampleActivity"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlStudentMaster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StudentId",
						"type": "nvarchar"
					},
					{
						"name": "StudentCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentName",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Language",
						"type": "nvarchar"
					},
					{
						"name": "Maths",
						"type": "nvarchar"
					},
					{
						"name": "Physics",
						"type": "nvarchar"
					},
					{
						"name": "Chemistry",
						"type": "nvarchar"
					},
					{
						"name": "ComputerScience",
						"type": "nvarchar"
					},
					{
						"name": "CreatedStageDate",
						"type": "nvarchar"
					},
					{
						"name": "updateddatetime",
						"type": "nvarchar"
					},
					{
						"name": "updatedby",
						"type": "nvarchar"
					},
					{
						"name": "isdeleted",
						"type": "nvarchar"
					},
					{
						"name": "sum",
						"type": "nvarchar"
					},
					{
						"name": "avg",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "master",
					"table": "studentinfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTSports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "sportsdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tot_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "testdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "rawData.json"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "calculatecost"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StudentId",
						"type": "nvarchar"
					},
					{
						"name": "StudentCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentName",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Language",
						"type": "nvarchar"
					},
					{
						"name": "Maths",
						"type": "nvarchar"
					},
					{
						"name": "Physics",
						"type": "nvarchar"
					},
					{
						"name": "Chemistry",
						"type": "nvarchar"
					},
					{
						"name": "ComputerScience",
						"type": "nvarchar"
					},
					{
						"name": "CreatedStageDate",
						"type": "nvarchar"
					},
					{
						"name": "updateddatetime",
						"type": "nvarchar"
					},
					{
						"name": "updatedby",
						"type": "nvarchar"
					},
					{
						"name": "isdeleted",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dim",
					"table": "studentInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableAlbin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAlbinTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AlbinTest"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAlbinTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableExamProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "ProductCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableExamProductsRest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DataFlowData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableExamSubCatagory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "ProductSubcategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableProduct10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DataFlowData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableTest2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tot_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableWeb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userid",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "body",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "webcontentAzure"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStudentAgg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StudentId",
						"type": "nvarchar"
					},
					{
						"name": "StudentCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentName",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Language",
						"type": "nvarchar"
					},
					{
						"name": "Maths",
						"type": "nvarchar"
					},
					{
						"name": "Physics",
						"type": "nvarchar"
					},
					{
						"name": "Chemistry",
						"type": "nvarchar"
					},
					{
						"name": "ComputerScience",
						"type": "nvarchar"
					},
					{
						"name": "CreatedStageDate",
						"type": "nvarchar"
					},
					{
						"name": "updateddatetime",
						"type": "nvarchar"
					},
					{
						"name": "updatedby",
						"type": "nvarchar"
					},
					{
						"name": "isdeleted",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dim",
					"table": "studentInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStudentData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "studentInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStudentMasterData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "master",
					"table": "studentInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azurejsonfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAlbinTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "jsonfileoutput.json"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAlbinTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurestudentDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StudentId",
						"type": "nvarchar"
					},
					{
						"name": "StudentCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentName",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Language",
						"type": "nvarchar"
					},
					{
						"name": "Maths",
						"type": "nvarchar"
					},
					{
						"name": "Physics",
						"type": "nvarchar"
					},
					{
						"name": "Chemistry",
						"type": "nvarchar"
					},
					{
						"name": "ComputerScience",
						"type": "nvarchar"
					},
					{
						"name": "CreatedStageDate",
						"type": "nvarchar"
					},
					{
						"name": "updateddatetime",
						"type": "nvarchar"
					},
					{
						"name": "updatedby",
						"type": "nvarchar"
					},
					{
						"name": "isdeleted",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dim",
					"table": "studentInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "USSales.csv",
						"container": "us-sales"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Units",
						"type": "String"
					},
					{
						"name": "Revenue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "costData.csv",
						"container": "output-file"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextAllFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sales-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Units",
						"type": "String"
					},
					{
						"name": "Revenue",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextCSVTOSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sales-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextRONA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RONA.csv",
						"container": "output-file"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextUsFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "america.csv",
						"container": "output-file"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextforeach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMca",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "sales-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMca')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextsqltocsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMca",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('usCanada',utcnow(),'.json')",
							"type": "Expression"
						},
						"container": "csv-files-trail"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Roll No",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Guide Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMca')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextussales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "USSales.csv",
						"container": "us-sales"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Units",
						"type": "String"
					},
					{
						"name": "Revenue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delimitedcanada')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Canada.csv",
						"container": "sales-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Units",
						"type": "String"
					},
					{
						"name": "Revenue",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample4.json",
						"container": "raw-json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"ppu": {
							"type": "number"
						},
						"batters": {
							"type": "object",
							"properties": {
								"batter": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"type": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"topping": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample5.json",
						"container": "raw-json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"year": {
										"type": "integer"
									},
									"cast": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"role": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonActivity2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMca",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "JsonData.json",
						"container": "student-info"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"fullName": {
							"type": "string"
						},
						"country": {
							"type": "string"
						},
						"email": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						},
						"accountCreated": {
							"type": "string"
						},
						"accounts": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accountId": {
										"type": "integer"
									},
									"accountBalance": {
										"type": "integer"
									},
									"created": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMca')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawJson1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "raw.json",
						"container": "raw-json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"firstName": {
							"type": "string"
						},
						"lastName": {
							"type": "string"
						},
						"phoneNumber": {
							"type": "string"
						},
						"emailAddress": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().id",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1Employee",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "2"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1Employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().id",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceWebContent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestWeb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestWeb1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesType')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "sales_Type"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServeAd2022')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerAd2022",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Person",
					"table": "EmailAddress"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerAd2022')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerExamDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "email",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "person_Emails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerExamDBUSSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "total_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerExamJsonRaw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Raw"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerExamRONA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "otherThanNorthAmerica"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerFetchWebcontent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "userid",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "body",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "webcontent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerAd2022",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerAd2022')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldbadventure",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tempbank"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldbadventure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldbadventure",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "tablename",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "combinetable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldbadventure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTableTesting",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "canUS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTableTesting",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tot_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldbadventure",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schemaname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldbadventure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableTesting')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTestingWeb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "webamp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTestingWeb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableloopupsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTableTesting",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTotSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTableTesting",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tot_salesTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServersales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerTableTesting",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Zip",
						"type": "nvarchar"
					},
					{
						"name": "units",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tot_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerTableTesting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerwebcontent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerExamDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "webcontent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerExamDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TypeSheet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Type",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSample.xlsx",
						"container": "sales-assignment"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "SKTransType",
						"type": "String"
					},
					{
						"name": "BKTransType",
						"type": "String"
					},
					{
						"name": "TransDesc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "USSales.csv",
						"fileSystem": "us-sales"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Units",
						"type": "String"
					},
					{
						"name": "Revenue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurebatters')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "batters"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurejson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rawDataTest.json",
						"container": "output-file"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesReport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": "salesReport"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesSheet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMca",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sales",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSample.xlsx",
						"container": "sales-assignment"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "InvoiceNumber",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Period",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "FromDate",
						"type": "String"
					},
					{
						"name": "ToDate",
						"type": "String"
					},
					{
						"name": "NetAmount",
						"type": "String"
					},
					{
						"name": "VatAmount",
						"type": "String"
					},
					{
						"name": "grossValue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMca')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldatabook1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldbadventure",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BNO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BNAME",
						"type": "varchar"
					},
					{
						"name": "AUTHOR",
						"type": "varchar"
					},
					{
						"name": "PUBLISHER",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "HumanResources",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldbadventure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/studentXL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageForSales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Exam",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Student_Data.xlsx",
						"container": "student-info"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "StudentId",
						"type": "String"
					},
					{
						"name": "Student code",
						"type": "String"
					},
					{
						"name": "Student name",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "Language",
						"type": "String"
					},
					{
						"name": "Maths",
						"type": "String"
					},
					{
						"name": "Phiysics",
						"type": "String"
					},
					{
						"name": "Chemistry",
						"type": "String"
					},
					{
						"name": "Computersicence",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageForSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageForSales')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageForSales_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageMca')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageMca_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseAlbinTest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAlbinTest_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseTest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseTest_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1Employee')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1Employee_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService3_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService4_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService5')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService5_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestWeb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestWeb1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer2_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer2_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServer2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer2_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerAd2022')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerAd2022_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerAd2022_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServerAd2022_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerAd2022_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerExamDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerExamDB_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerExamDB_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServerExamDB_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerExamDB_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableTesting')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerTableTesting_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerTableTesting_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServerTableTesting_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerTableTesting_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTestingWeb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerTestingWeb_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerTestingWeb_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServerTestingWeb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerTestingWeb_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldbadventure')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('sqldbadventure_properties_typeProperties_server')]",
					"database": "[parameters('sqldbadventure_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('sqldbadventure_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('sqldbadventure_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldbexcersie')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('sqldbexcersie_properties_typeProperties_server')]",
					"database": "[parameters('sqldbexcersie_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "Windows",
					"userName": "[parameters('sqldbexcersie_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('sqldbexcersie_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeExcersie",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeExcersie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeExcersie')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Sales_Type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SharmilaAssignments"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TypeSheet",
								"type": "DatasetReference"
							},
							"name": "Type"
						},
						{
							"dataset": {
								"referenceName": "salesSheet",
								"type": "DatasetReference"
							},
							"name": "sales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "salesReport",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SkDate"
						},
						{
							"name": "JoinSalesType"
						},
						{
							"name": "DiscardDuplicates"
						},
						{
							"name": "ColumnCharecontrolNumber"
						},
						{
							"name": "ColumnAmountPaidReceived"
						},
						{
							"name": "AsOfDate"
						},
						{
							"name": "AmountPaidReceivedDesc"
						},
						{
							"name": "ModifiedStyle"
						},
						{
							"name": "FIleName"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SKTransType as string,",
						"          BKTransType as string,",
						"          TransDesc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Type",
						"source(output(",
						"          InvoiceNumber as string,",
						"          Date as string,",
						"          Type as string,",
						"          Period as string,",
						"          DueDate as string,",
						"          InvoiceDate as string,",
						"          FromDate as string,",
						"          ToDate as string,",
						"          NetAmount as string,",
						"          VatAmount as string,",
						"          grossValue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sales",
						"ModifiedStyle derive(skDate = concat(\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 0, 2),\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 4, 2),\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 7, 4)\r",
						"   \r",
						")) ~> SkDate",
						"SkDate, Type join(Type == BKTransType,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSalesType",
						"JoinSalesType select(mapColumn(",
						"          InvoiceNumber,",
						"          Date,",
						"          Type,",
						"          Period,",
						"          DueDate,",
						"          InvoiceDate,",
						"          FromDate,",
						"          ToDate,",
						"          NetAmount,",
						"          VatAmount,",
						"          grossValue,",
						"          skDate,",
						"          SKTransType,",
						"          TransDesc",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DiscardDuplicates",
						"DiscardDuplicates derive(CharecontrolNumber = concat(\r",
						"    Type,'-',InvoiceNumber\r",
						")) ~> ColumnCharecontrolNumber",
						"ColumnCharecontrolNumber derive({Amount _Paid/Received} = toString((toDecimal(NetAmount) + toDecimal(VatAmount)) * toDecimal(grossValue))) ~> ColumnAmountPaidReceived",
						"ColumnAmountPaidReceived derive(AsOfDate = toString(\r",
						"    addDays(\r",
						"        toDate(\r",
						"            concat(\r",
						"                substring(toString(addMonths(toDate(Date, 'dd-MM-yyyy'), 1), 'yyyy-MM-dd'), 0, 7),\r",
						"                '-01'\r",
						"            ), 'yyyy-MM-dd'\r",
						"        ),\r",
						"        -1\r",
						"    ),\r",
						"    'dd-MM-yyyy'\r",
						")) ~> AsOfDate",
						"AsOfDate derive({Amount _Paid/ReceivedDesc} = iif(\r",
						"    {Amount _Paid/Received} >= '800000',\r",
						"    iif(\r",
						"        Type == 'C', 'charge is high',\r",
						"        iif(\r",
						"            Type == 'P', 'Payable is high',\r",
						"            iif(\r",
						"                Type == 'K', 'Cheque is high',\r",
						"                iif(\r",
						"                    Type == 'J', 'Journal entry is high',\r",
						"                    iif(\r",
						"                        Type == 'R', 'Receipt is high',\r",
						"                        'Unknown Type'\r",
						"                    )\r",
						"                )\r",
						"            )\r",
						"        )\r",
						"    ),\r",
						"    iif(\r",
						"        {Amount _Paid/Received} >= '400000',\r",
						"        iif(\r",
						"            Type == 'C', 'charge is medium',\r",
						"            iif(\r",
						"                Type == 'P', 'Payable is medium',\r",
						"                iif(\r",
						"                    Type == 'K', 'Cheque is medium',\r",
						"                    iif(\r",
						"                        Type == 'J', 'Journal entry is medium',\r",
						"                        iif(\r",
						"                            Type == 'R', 'Receipt is medium',\r",
						"                            'Unknown Type'\r",
						"                        )\r",
						"                    )\r",
						"                )\r",
						"            )\r",
						"        ),\r",
						"        iif(\r",
						"            {Amount _Paid/Received} >= '100000',\r",
						"            iif(\r",
						"                Type == 'C', 'charge is Low',\r",
						"                iif(\r",
						"                    Type == 'P', 'Payable is Low',\r",
						"                    iif(\r",
						"                        Type == 'K', 'Cheque is Low',\r",
						"                        iif(\r",
						"                            Type == 'J', 'Journal entry is Low',\r",
						"                            iif(\r",
						"                                Type == 'R', 'Receipt is Low',\r",
						"                                'Unknown Type'\r",
						"                            )\r",
						"                        )\r",
						"                    )\r",
						"                )\r",
						"            ),\r",
						"            iif(\r",
						"                {Amount _Paid/Received} < '100000',\r",
						"                iif(\r",
						"                    Type == 'C', 'charge is very Low',\r",
						"                    iif(\r",
						"                        Type == 'P', 'Payable is very Low',\r",
						"                        iif(\r",
						"                            Type == 'K', 'Cheque is very Low',\r",
						"                            iif(\r",
						"                                Type == 'J', 'Journal entry is very Low',\r",
						"                                iif(\r",
						"                                    Type == 'R', 'Receipt is very Low',\r",
						"                                    'Unknown Type'\r",
						"                                )\r",
						"                            )\r",
						"                        )\r",
						"                    )\r",
						"                ),\r",
						"                'Amount out of range'\r",
						"            )\r",
						"        )\r",
						"    )\r",
						")) ~> AmountPaidReceivedDesc",
						"sales derive(Date = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
						"          DueDate = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
						"          InvoiceDate = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
						"          FromDate = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
						"          ToDate = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
						"          Period = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy')) ~> ModifiedStyle",
						"AmountPaidReceivedDesc derive(FileName = concat('SalesReport_', toString(currentUTC(), 'ddMMyyyy'), '.xlsx')) ~> FIleName",
						"FIleName keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          ID,",
						"          InvoiceNumber,",
						"          Date,",
						"          skDate,",
						"          Type,",
						"          Period,",
						"          DueDate,",
						"          InvoiceDate,",
						"          FromDate,",
						"          ToDate,",
						"          NetAmount,",
						"          VatAmount,",
						"          grossValue,",
						"          SKTransType,",
						"          TransDesc,",
						"          CharecontrolNumber,",
						"          {Amount _Paid/Received},",
						"          {Amount _Paid/ReceivedDesc},",
						"          AsOfDate,",
						"          FileName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TypeSheet')]",
				"[concat(variables('factoryId'), '/datasets/salesSheet')]",
				"[concat(variables('factoryId'), '/datasets/salesReport')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TABLE_BLOB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SharmilaAssignments"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonActivity2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlJsonStageTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "StageCreatedDate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          accountCreated as date,",
						"          accounts as (accountBalance as integer, accountId as long, created as date)[],",
						"          country as string,",
						"          email as string,",
						"          fullName as string,",
						"          id as short,",
						"          phone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(accounts),",
						"     mapColumn(",
						"          id,",
						"          fullName,",
						"          country,",
						"          email,",
						"          phone,",
						"          accountCreated,",
						"          accounts = accounts.accountId,",
						"          accountBalance = accounts.accountBalance,",
						"          created = accounts.created",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(StageCreatedDate = currentUTC()) ~> StageCreatedDate",
						"StageCreatedDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JsonActivity2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlJsonStageTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataStudentMaster')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SharmilaAssignments"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzurestudentDim",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureStudentMasterData",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SumColumn"
						},
						{
							"name": "AvgColumn"
						},
						{
							"name": "GradeColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StudentId as string,",
						"          StudentCode as string,",
						"          StudentName as string,",
						"          Date as string,",
						"          Language as string,",
						"          Maths as string,",
						"          Physics as string,",
						"          Chemistry as string,",
						"          ComputerScience as string,",
						"          CreatedStageDate as string,",
						"          updateddatetime as string,",
						"          updatedby as string,",
						"          isdeleted as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(sum = toInteger(Language) + toInteger(Maths) + toInteger(Physics) + toInteger(ComputerScience) + toInteger(Chemistry)) ~> SumColumn",
						"SumColumn derive(AVG = sum/5) ~> AvgColumn",
						"AvgColumn derive(Grade = case(AVG>90, 'A2', \r",
						"AVG>80,'A1',\r",
						"AVG > 70, 'B1',\r",
						"AVG > 60, 'B2',\r",
						" AVG > 50, 'C1',\r",
						" AVG > 40, 'C2',\r",
						" AVG > 30, 'D',\r",
						"'E'\r",
						")) ~> GradeColumn",
						"GradeColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table [master].[studentinfo]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzurestudentDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureStudentMasterData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowExam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableExamProduct",
								"type": "DatasetReference"
							},
							"name": "ProductCategory"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableExamSubCatagory",
								"type": "DatasetReference"
							},
							"name": "ProductSubCatagory"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct10",
								"type": "DatasetReference"
							},
							"name": "Top10"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableExamProductsRest",
								"type": "DatasetReference"
							},
							"name": "sinkRest"
						}
					],
					"transformations": [
						{
							"name": "selectidname"
						},
						{
							"name": "selectSubcolumns"
						},
						{
							"name": "joinCatSubCat"
						},
						{
							"name": "selectOnly1Id"
						},
						{
							"name": "selectProductDetails"
						},
						{
							"name": "joinsubcatProduct"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "IdonTop"
						},
						{
							"name": "rank1"
						},
						{
							"name": "Profit"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategory",
						"source(output(",
						"          ProductSubcategoryID as integer,",
						"          ProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductSubCatagory",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          MakeFlag as boolean,",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeUnitMeasureCode as string,",
						"          WeightUnitMeasureCode as string,",
						"          Weight as decimal(8,2),",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          Class as string,",
						"          Style as string,",
						"          ProductSubcategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Products",
						"ProductCategory select(mapColumn(",
						"          ProductCategoryID,",
						"          Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectidname",
						"ProductSubCatagory select(mapColumn(",
						"          ProductSubcategoryID,",
						"          ProductCategoryID,",
						"          Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSubcolumns",
						"selectSubcolumns, selectidname join(selectSubcolumns@ProductCategoryID == selectidname@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCatSubCat",
						"joinCatSubCat select(mapColumn(",
						"          ProductSubcategoryID,",
						"          SubCatagoryName = selectSubcolumns@Name,",
						"          CatagoryName = selectidname@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOnly1Id",
						"Products select(mapColumn(",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          DaysToManufacture,",
						"          ProductSubcategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDetails",
						"selectProductDetails, selectOnly1Id join(selectProductDetails@ProductSubcategoryID == selectOnly1Id@ProductSubcategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinsubcatProduct",
						"joinsubcatProduct select(mapColumn(",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          DaysToManufacture,",
						"          ProductSubcategoryID = selectProductDetails@ProductSubcategoryID,",
						"          SubCatagoryName,",
						"          ProductCategoryName = CatagoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(ProductId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          ProductId,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          DaysToManufacture,",
						"          ProductSubcategoryID,",
						"          SubCatagoryName,",
						"          ProductCategoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> IdonTop",
						"Profit rank(asc(Profit_margin, true),",
						"     output(Rank as long)) ~> rank1",
						"IdonTop derive(Profit_margin = ListPrice-StandardCost) ~> Profit",
						"rank1 split(Rank<=10,",
						"     disjoint: true) ~> split1@(topTen, else)",
						"split1@topTen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Top10",
						"split1@else sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkRest"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableExamProduct')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableExamSubCatagory')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct10')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableExamProductsRest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowTest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "dataflowus"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextAllFiles",
								"type": "DatasetReference"
							},
							"name": "dataflowcanada"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAlbin",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dataflowus",
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dataflowcanada",
						"dataflowus derive(Country = 'USA') ~> derivedColumn1",
						"derivedColumn1, dataflowcanada union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextAllFiles')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableAlbin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonfloe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SharmilaAssignments"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azurejsonfile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movies as (title as string, year as integer, cast as (name as string, role as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 1000,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> source1",
						"source1 foldDown(unroll(movies),",
						"     mapColumn(",
						"          movies = movies.title,",
						"          year = movies.year",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/Azurejsonfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "AzureSqlTable3",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSqlTable3",
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared AzureSqlTable3 = let AdfDoc = Sql.Database(\"azure-sql-storage1.database.windows.net\", \"AdventureWorks2022\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"Production\",Item=\"Product\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"AzureSqlTable3\",\r\n  #\"Filtered rows\" = Table.SelectRows(Source, each ([FinishedGoodsFlag] = true) and ([MakeFlag] = false)),\r\n  #\"Sorted rows\" = Table.Sort(#\"Filtered rows\", {{\"ProductNumber\", Order.Ascending}}),\r\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Sorted rows\", each ([Color] <> null) and ([Size] <> null)),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Filtered rows 1\", {\"SizeUnitMeasureCode\", \"WeightUnitMeasureCode\", \"Weight\", \"DaysToManufacture\", \"Class\"}),\r\n  #\"Filtered rows 2\" = Table.SelectRows(#\"Removed columns\", each ([SellEndDate] <> null)),\r\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Filtered rows 2\", {\"rowguid\", \"DiscontinuedDate\"}),\r\n  #\"Added custom\" = Table.AddColumn(#\"Removed columns 1\", \"Custom\", each [SellEndDate] - [SellStartDate]),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Added custom\", {{\"Custom\", \"Total Days\"}}),\r\n  #\"Removed columns 2\" = Table.RemoveColumns(#\"Renamed columns\", {\"Total Days\"}),\r\n  #\"Added custom 1\" = Table.TransformColumnTypes(Table.AddColumn(#\"Removed columns 2\", \"Profit\", each [ListPrice] - [StandardCost]), {{\"Profit\", Currency.Type}}) in #\"Added custom 1\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		}
	]
}