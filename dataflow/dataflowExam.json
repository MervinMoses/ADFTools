{
	"name": "dataflowExam",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableExamProduct",
						"type": "DatasetReference"
					},
					"name": "ProductCategory"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableExamSubCatagory",
						"type": "DatasetReference"
					},
					"name": "ProductSubCatagory"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "Products"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectidname"
				},
				{
					"name": "selectSubcolumns"
				},
				{
					"name": "joinCatSubCat"
				},
				{
					"name": "selectOnly1Id"
				},
				{
					"name": "selectProductDetails"
				},
				{
					"name": "joinsubcatProduct"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "IdonTop"
				},
				{
					"name": "rank1"
				},
				{
					"name": "Profit"
				},
				{
					"name": "sortRank"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductCategoryID as integer,",
				"          Name as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductCategory",
				"source(output(",
				"          ProductSubcategoryID as integer,",
				"          ProductCategoryID as integer,",
				"          Name as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductSubCatagory",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as boolean,",
				"          FinishedGoodsFlag as boolean,",
				"          Color as string,",
				"          SafetyStockLevel as integer,",
				"          ReorderPoint as integer,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as decimal(8,2),",
				"          DaysToManufacture as integer,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Products",
				"ProductCategory select(mapColumn(",
				"          ProductCategoryID,",
				"          Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectidname",
				"ProductSubCatagory select(mapColumn(",
				"          ProductSubcategoryID,",
				"          ProductCategoryID,",
				"          Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSubcolumns",
				"selectSubcolumns, selectidname join(selectSubcolumns@ProductCategoryID == selectidname@ProductCategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCatSubCat",
				"joinCatSubCat select(mapColumn(",
				"          ProductSubcategoryID,",
				"          SubCatagoryName = selectSubcolumns@Name,",
				"          CatagoryName = selectidname@Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnly1Id",
				"Products select(mapColumn(",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          DaysToManufacture,",
				"          ProductSubcategoryID,",
				"          ProductModelID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProductDetails",
				"selectProductDetails, selectOnly1Id join(selectProductDetails@ProductSubcategoryID == selectOnly1Id@ProductSubcategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinsubcatProduct",
				"joinsubcatProduct select(mapColumn(",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          DaysToManufacture,",
				"          ProductSubcategoryID = selectProductDetails@ProductSubcategoryID,",
				"          SubCatagoryName,",
				"          ProductCategoryName = CatagoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(ProductId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          ProductId,",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          DaysToManufacture,",
				"          ProductSubcategoryID,",
				"          SubCatagoryName,",
				"          ProductCategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IdonTop",
				"Profit rank(desc(SubCatagoryName, true),",
				"     output(Rank as long)) ~> rank1",
				"IdonTop derive(Profit_margin = ListPrice-StandardCost) ~> Profit",
				"rank1 sort(asc(Rank, true)) ~> sortRank",
				"sortRank split(ERROR_FUNCTION(''),",
				"     disjoint: false) ~> split1@(, )",
				"split1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}