{
	"name": "DF_Sales_Type",
	"properties": {
		"folder": {
			"name": "SharmilaAssignments"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TypeSheet",
						"type": "DatasetReference"
					},
					"name": "Type"
				},
				{
					"dataset": {
						"referenceName": "salesSheet",
						"type": "DatasetReference"
					},
					"name": "sales"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SalesType",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "JoinSalesType"
				},
				{
					"name": "DiscardDuplicates"
				},
				{
					"name": "ColumnCharecontrolNumber"
				},
				{
					"name": "ColumnAmountPaidReceived"
				},
				{
					"name": "AsOfDate"
				},
				{
					"name": "AmountPaidReceivedDesc"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SKTransType as string,",
				"          BKTransType as string,",
				"          TransDesc as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Type",
				"source(output(",
				"          InvoiceNumber as string,",
				"          Date as string,",
				"          Type as string,",
				"          Period as string,",
				"          DueDate as string,",
				"          InvoiceDate as string,",
				"          FromDate as string,",
				"          ToDate as string,",
				"          NetAmount as string,",
				"          VatAmount as string,",
				"          grossValue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sales",
				"sales derive(skDate = concat(\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 9, 2),\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 6, 2),\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 0, 4)\r",
				"    \r",
				")\r",
				") ~> derivedColumn1",
				"derivedColumn1, Type join(Type == BKTransType,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSalesType",
				"JoinSalesType select(mapColumn(",
				"          InvoiceNumber,",
				"          Date,",
				"          Type,",
				"          Period,",
				"          DueDate,",
				"          InvoiceDate,",
				"          FromDate,",
				"          ToDate,",
				"          NetAmount,",
				"          VatAmount,",
				"          grossValue,",
				"          skDate,",
				"          SKTransType,",
				"          TransDesc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DiscardDuplicates",
				"DiscardDuplicates derive(CharecontrolNumber = concat(\r",
				"    Type,'-',InvoiceNumber\r",
				")) ~> ColumnCharecontrolNumber",
				"ColumnCharecontrolNumber derive({Amount _Paid/Received} = toString((toDecimal(NetAmount) + toDecimal(VatAmount)) * toDecimal(grossValue))\r",
				") ~> ColumnAmountPaidReceived",
				"ColumnAmountPaidReceived derive(AsOfDate = toString(\r",
				"    addDays(\r",
				"        toDate(\r",
				"            concat(\r",
				"                substring(toString(addMonths(toDate(Date), 1)), 0, 7),\r",
				"                '-01'\r",
				"            )\r",
				"        ),\r",
				"        -1\r",
				"    ),\r",
				"    'dd-MM-yyyy'\r",
				")\r",
				") ~> AsOfDate",
				"AsOfDate derive({Amount _Paid/ReceivedDesc} = iif(\r",
				"    {Amount _Paid/Received} >= '800000',\r",
				"    iif(\r",
				"        Type == 'C', 'charge is high',\r",
				"        iif(\r",
				"            Type == 'P', 'Payable is high',\r",
				"            iif(\r",
				"                Type == 'K', 'Cheque is high',\r",
				"                iif(\r",
				"                    Type == 'J', 'Journal entry is high',\r",
				"                    iif(\r",
				"                        Type == 'R', 'Receipt is high',\r",
				"                        'Unknown Type'\r",
				"                    )\r",
				"                )\r",
				"            )\r",
				"        )\r",
				"    ),\r",
				"    iif(\r",
				"        {Amount _Paid/Received} >= '400000',\r",
				"        iif(\r",
				"            Type == 'C', 'charge is medium',\r",
				"            iif(\r",
				"                Type == 'P', 'Payable is medium',\r",
				"                iif(\r",
				"                    Type == 'K', 'Cheque is medium',\r",
				"                    iif(\r",
				"                        Type == 'J', 'Journal entry is medium',\r",
				"                        iif(\r",
				"                            Type == 'R', 'Receipt is medium',\r",
				"                            'Unknown Type'\r",
				"                        )\r",
				"                    )\r",
				"                )\r",
				"            )\r",
				"        ),\r",
				"        iif(\r",
				"            {Amount _Paid/Received} >= '100000',\r",
				"            iif(\r",
				"                Type == 'C', 'charge is Low',\r",
				"                iif(\r",
				"                    Type == 'P', 'Payable is Low',\r",
				"                    iif(\r",
				"                        Type == 'K', 'Cheque is Low',\r",
				"                        iif(\r",
				"                            Type == 'J', 'Journal entry is Low',\r",
				"                            iif(\r",
				"                                Type == 'R', 'Receipt is Low',\r",
				"                                'Unknown Type'\r",
				"                            )\r",
				"                        )\r",
				"                    )\r",
				"                )\r",
				"            ),\r",
				"            iif(\r",
				"                {Amount _Paid/Received} < '100000',\r",
				"                iif(\r",
				"                    Type == 'C', 'charge is very Low',\r",
				"                    iif(\r",
				"                        Type == 'P', 'Payable is very Low',\r",
				"                        iif(\r",
				"                            Type == 'K', 'Cheque is very Low',\r",
				"                            iif(\r",
				"                                Type == 'J', 'Journal entry is very Low',\r",
				"                                iif(\r",
				"                                    Type == 'R', 'Receipt is very Low',\r",
				"                                    'Unknown Type'\r",
				"                                )\r",
				"                            )\r",
				"                        )\r",
				"                    )\r",
				"                ),\r",
				"                'Amount out of range'\r",
				"            )\r",
				"        )\r",
				"    )\r",
				")\r",
				") ~> AmountPaidReceivedDesc",
				"AmountPaidReceivedDesc keyGenerate(output(ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}